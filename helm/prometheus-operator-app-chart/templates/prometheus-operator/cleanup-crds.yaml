{{- if and .Values.prometheusOperator.enabled .Values.prometheusOperator.cleanupCustomResource }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "prometheus-operator.fullname" . }}-operator-cleanup
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": hook-succeeded
  labels:
    app: {{ template "prometheus-operator.name" . }}-operator
{{ include "prometheus-operator.labels" . | indent 4 }}
spec:
  template:
    metadata:
      name: {{ template "prometheus-operator.fullname" . }}-operator-cleanup
      labels:
        app: {{ template "prometheus-operator.name" . }}-operator
{{ include "prometheus-operator.labels" . | indent 8 }}
    spec:
    {{- if .Values.global.rbac.create }}
      serviceAccountName: {{ template "prometheus-operator.operator.serviceAccountName" . }}
    {{- end }}
      containers:
        - name: kubectl
          image: "{{ .Values.prometheusOperator.hyperkubeImage.repository }}:{{ .Values.prometheusOperator.hyperkubeImage.tag }}"
          imagePullPolicy: "{{ .Values.prometheusOperator.hyperkubeImage.pullPolicy }}"
          command:
          - /bin/sh
          - -c
          - >
              kubectl delete alertmanager   --all;
              kubectl delete prometheus     --all;
              kubectl delete prometheusrule --all;
              kubectl delete servicemonitor --all;
              sleep 10;
              kubectl delete crd {{ printf "alertmanagers.%s" (.Values.prometheusOperator.crdApiGroup | default "monitoring.coreos.com") }};
              kubectl delete crd {{ printf "prometheuses.%s" (.Values.prometheusOperator.crdApiGroup | default "monitoring.coreos.com") }};
              kubectl delete crd {{ printf "prometheusrules.%s" (.Values.prometheusOperator.crdApiGroup | default "monitoring.coreos.com") }};
              kubectl delete crd {{ printf "servicemonitors.%s" (.Values.prometheusOperator.crdApiGroup | default "monitoring.coreos.com") }};
              kubectl delete crd {{ printf "podmonitors.%s" (.Values.prometheusOperator.crdApiGroup | default "monitoring.coreos.com") }};
              kubectl delete crd {{ printf "thanosrulers.%s" (.Values.prometheusOperator.crdApiGroup | default "monitoring.coreos.com") }};
      restartPolicy: OnFailure
{{- end }}
