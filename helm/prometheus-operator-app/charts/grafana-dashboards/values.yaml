# Maybe prometheus-operator-app.
#nameOverride: something

## ForceDeployDatasources Create datasource configmap even if grafana deployment has been disabled
##
forceDeployDatasources: false

## ForceDeployDashboard Create dashboard configmap even if grafana deployment has been disabled
##
forceDeployDashboards: false

## Deploy default dashboards
##
defaultDashboardsEnabled: true

## Timezone for the default dashboards
## Other options are: browser or a specific timezone, i.e. Europe/Luxembourg
##
defaultDashboardsTimezone: utc

deleteDatasources: []
# - name: example-datasource
#   orgId: 1

## Configure additional grafana datasources (passed through tpl)
## ref: http://docs.grafana.org/administration/provisioning/#datasources
additionalDataSources: []
# - name: prometheus-sample
#   access: proxy
#   basicAuth: true
#   basicAuthPassword: pass
#   basicAuthUser: daco
#   editable: false
#   jsonData:
#       tlsSkipVerify: true
#   orgId: 1
#   type: prometheus
#   url: https://{{ printf "%s-prometheus.svc" .Release.Name }}:9090
#   version: 1

sidecar:
  dashboards:
    enabled: true
    label: grafana_dashboard

  datasources:
    enabled: true
    defaultDatasourceEnabled: true

    ## URL of prometheus datasource
    ##
    url: http://{{ template "kube-prometheus-stack.fullname" . }}-prometheus.{{ template "kube-prometheus-stack.namespace" . }}:9090/
    # url: http://prometheus-stack-prometheus:9090/

    # Good to align with prometheus.prometheusSpec.scrapeInterval
    # defaultDatasourceScrapeInterval: 15s

    ## Annotations for Grafana datasource configmaps
    ##
    annotations: {}

    label: grafana_datasource

## If true, create a serviceMonitor for grafana
##
serviceMonitor:
  ## Scrape interval. If not set, the Prometheus default scrape interval is used.
  ##
  interval: ""
  selfMonitor: true

  # Path to use for scraping metrics. Might be different if server.root_url is set
  # in grafana.ini
  path: "/metrics"

# Must be equal to grafana.service.portName
service:
  portName: http-web
